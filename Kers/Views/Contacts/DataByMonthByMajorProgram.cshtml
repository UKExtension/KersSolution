@{
    var FiscalYear = ViewData["FiscalYear"] as Kers.Models.Entities.KERScore.FiscalYear;
    Layout = "~/Views/Shared/_LayoutReports.cshtml";
    ViewData["Title"] = "Statistical Contact Report for FY" + FiscalYear.Name;
    ViewData["Subtitle"] = "Kentucky Extension Reporting System";

    var totalHours = ViewData["totalHours"] as float?;
    var totalContacts = ViewData["totalContacts"] as int?;
    var totalMultistate = ViewData["totalMultistate"] as float?;
    var totalActivities = ViewData["totalActivities"] as int? ;

    var unit = ViewData["unit"] as Kers.Models.Entities.KERScore.PlanningUnit;
    var district = ViewData["district"] as Kers.Models.Entities.KERScore.District;


    var monthsForTheGraph = ViewData["months"] as string;
    var hoursForTheGraph = ViewData["hours"] as string;


    var colors1 = "[\"#26B99A\", \"#34495E\", \"#BDC3C7\", \"#3498DB\", \"#9B59B6\", \"#8abb6f\", \"#759c6a\", \"#bfd3b7\"]";
    var colors = "[\"#72c380\", \"#6f7a8a\", \"#f7cb38\",\"#96CA59\", \"#3F97EB\", \"#5a8022\", \"#2c7282\"]";
    Random random = new Random();

    var programsForTheLegend = ViewData["programsForTheLegend"] as string;
    var ProgramsHoursGraphDataList = ViewData["ProgramsHoursGraphDataList"] as string;
    var ProgramsContactsByProgramSeries = ViewData["ProgramsContactsByProgramSeries"] as string;

    

    var ProgramDataPerMonth = ViewData["ProgramDataPerMonth"] as List<Kers.Controllers.Reports.ProgramDataPerMonth>;
    var AllProgramsData = ViewData["AllProgramsData"] as List<Kers.Controllers.Reports.ProgramDataPerMonth>;
    var ProgramsGendersGraphDataList = ViewData["ProgramsGendersGraphDataList"] as string;


    var GraphCategories = ViewData["GraphCategories"] as string;
    var GraphData = ViewData["GraphData"] as string;
    var GraphLinks = ViewData["GraphLinks"] as string;

}
@model List<List<Kers.Models.Data.PerProgramActivities>>

@if( unit != null )
{
    <h3>@unit.Name <small>@FiscalYear.Start.ToString("MMM d, yyyy") - @FiscalYear.End.ToString("MMM d, yyyy")</small></h3>
    
}
else if( district != null)
{
    <h3>@district.Name <small>@FiscalYear.Start.ToString("MMM d, yyyy") - @FiscalYear.End.ToString("MMM d, yyyy")</small></h3>
}

<style>
    .main-container .graph{
        height: 380px;
    }
    .main-container{
        height: 430px;
    }
    .tile{
        cursor:pointer !important;
        width: 33%;
    }
    .tiles .graph{
        height: 190px;
        margin-top: -40px;
        margin-left: -10px;
    }
</style>
<div class="row top_tiles">
    <div class="animated flipInY col-lg-3 col-md-3 col-sm-6 col-xs-12">
    <div class="tile-stats">
        <div class="icon"><i class="fa fa-clock-o"></i></div>
        <div class="count">@totalHours</div>
        <h3>Total Hours</h3>
        <p>Contributed.</p>
    </div>
    </div>
    <div class="animated flipInY col-lg-3 col-md-3 col-sm-6 col-xs-12">
    <div class="tile-stats">
        <div class="icon"><i class="fa fa-comments-o"></i></div>
        <div class="count">@totalContacts</div>
        <h3>Contacts</h3>
        <p>with Individuals.</p>
    </div>
    </div>
    <div class="animated flipInY col-lg-3 col-md-3 col-sm-6 col-xs-12">
    <div class="tile-stats">
        <div class="icon"><i class="fa fa-code-fork"></i></div>
        <div class="count">@totalMultistate</div>
        <h3>Hours</h3>
        <p>of Multistate Efforts.</p>
    </div>
    </div>
    <div class="animated flipInY col-lg-3 col-md-3 col-sm-6 col-xs-12">
    <div class="tile-stats">
        <div class="icon"><i class="fa fa-check-square-o"></i></div>
        <div class="count">@totalActivities</div>
        <h3>Number of activities</h3>
        <p>Performed.</p>
    </div>
    </div>
</div>



<div class="row">
    <div class="col-md-12">
        <div class="x_panel">
        <div class="x_title">
            <h2>Statistical Contacts</h2>
            
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <div class="col-md-9 col-sm-12 col-xs-12">
            <div class="main-container">
                <div id="Chart0" class="demo-placeholder">
                    <span>Male, Female Distribution</span>
                    <h2>Per Major Program</h2>
                    <div class="graph"></div>
                </div>
            </div>
            <div class="tiles">
                <div class="col-md-4 tile">
                    <div id="Chart1">
                        <span>Top 5 Major Programs</span>
                        <h2>Contacts per Month</h2>
                        <div class="graph"></div>
                    </div>
                </div>
                <div  class="col-md-4 tile">
                    <div id="Chart2">
                        <span>Subtitle </span>
                        <h2>Title</h2>
                        <div class="graph"></div>
                    </div>
                </div>
                <div  class="col-md-4 tile">
                    <div id="Chart3">
                        <span>Top 5 Major Programs </span>
                        <h2>Hours per Month</h2>
                        <div class="graph"></div>
                    </div>
                </div>
            </div>

            </div>

            <div class="col-md-3 col-sm-12 col-xs-12">
            <div>
                <div class="x_title">
                <h2>Top Major Programs</h2>
                
                <div class="clearfix"></div>
                </div>
                <ul class="list-unstyled top_profiles scroll-view">

                @foreach( var prgrmData in AllProgramsData.Take(7) )
                {
                    <li class="media event">
                    <div class="media-body">
                        <a class="title" asp-controller="MajorProgram"  asp-action="Program" asp-route-id=@prgrmData.MajorProgram.Id>@prgrmData.MajorProgram.Name</a>
                        <p><strong>@prgrmData.Audience.Sum(s => s)</strong> Contacts (@prgrmData.Male.Sum(s => s) Male, @prgrmData.Female.Sum(s => s) Female)</p>
                        <p> <small>@prgrmData.Hours.Sum(s => s) Hours</small>
                        </p>
                    </div>
                    </li>
                }
                
                </ul>
            </div>
            </div>

        </div>
        </div>
    </div>
</div>


@section scripts
{
   <script type="text/javascript" src="@Url.Content("https://cdnjs.cloudflare.com/ajax/libs/echarts/4.1.0/echarts-en.min.js")"></script>
   <script>
      
	 

    var options = [];
    var charts = [];
    var chartPlaceholders = ["Chart0","Chart1","Chart2", "Chart3"];

    options[0] = {
        tooltip: {
            axisPointer: {
                type: 'shadow'
            },
            formatter: function (params, ticket, callback) {
                return params.data[2] + '<br>Female: ' + params.data[0] + ', Male: ' + params.data[1];
            }
        },
        color: @Html.Raw(colors),
        xAxis: {
        name: "Female",
        nameLocation: "center",
        nameGap: 22
        },
        yAxis: {
        name: "Male",
        nameLocation: "center",
        nameGap: 22
        },
        series: [{
            symbolSize: 20,
            data: @Html.Raw(ProgramsGendersGraphDataList),
            itemStyle: {
            color: function (params) {
                var colors = @Html.Raw(colors);
                return colors[Math.floor(Math.random() * colors.length)];
            }
            } ,
            type: 'scatter'
        }]
    };






    options[1] = {
        color: @Html.Raw(colors),
        legend: {
            type: 'scroll',
            data: @Html.Raw(programsForTheLegend)
        },
        toolbox: {
            show: !1
        },
        calculable: !1,
        tooltip : {
            trigger: 'axis',
            axisPointer : {            
                type : 'shadow'        
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis : [
            {
                type : 'category',
                data : @Html.Raw(monthsForTheGraph),
                axisTick: {
                    alignWithLabel: true
                }
            }
        ],
        yAxis : [
            {
                type : 'value'
            }
        ],
        series : @Html.Raw(ProgramsContactsByProgramSeries)
    };

    var GraphCategories = [{ name: "Employees"}, { name: "Major Programs"}, { name: "Success Stories"}];

    options[2] = {
        color: @Html.Raw(colors),
        tooltip: {
            formatter: function(x) {
                return x.data.des;
            }
        },
        legend: {
            // selectedMode: 'single',
            data: GraphCategories.map(function (a) {
                return a.name;
            })
        },
        animationDurationUpdate: 1500,
        animationEasingUpdate: 'quinticInOut',
        series: [{
            type: 'graph',
            layout: 'circular',
            circular: {
                    rotateLabel: true
                },
            label: {
                normal: {
                    show: true,
                    textStyle: {}
                }
            },
            categories: GraphCategories,
            data: @Html.Raw(GraphData),
            links: @Html.Raw(GraphLinks),
            label: {
                normal: {
                    show: true,
                    textStyle: {}
                }
            },
            lineStyle: {
                normal: {
                    color: 'source',
                    curveness: 0.3
                }
            }
        }]
    };
    
    var idd = {
        
            legend:  @Html.Raw(GraphCategories),
            series: [{
                type: 'graph',
                layout: 'none',
                categories:  @Html.Raw(GraphCategories),
                data: @Html.Raw(GraphData),
                links: @Html.Raw(GraphLinks)
            }]
        };

        options[3] = {
                tooltip: {
                    trigger: "axis"
                },
                legend: {
                    x: 220,
                    y: 40,
                    data: @Html.Raw(programsForTheLegend)
                },
                calculable: !6,
                xAxis : [
                    {
                        type : 'category',
                        data : @Html.Raw(monthsForTheGraph),
                        boundaryGap: !1
                    }
                ],
                yAxis : [
                    {
                        type : 'value'
                    }
                ],
                series: @Html.Raw(ProgramsHoursGraphDataList)
            };

        initCharts();

        $(window).on('resize', function(){
            resizeCharts();
        });


        function initCharts(){
            var theId = $("#main");
            for( i = 0; i < 4; i++)
            {
                charts[i] = echarts.init($("#" + chartPlaceholders[i] + " .graph")[0]);
                if( i > 0) {
                    if( options[i].legend != null && options[i].legend != undefined ){
                        options[i].legend.show = false;
                    }
                }
                charts[i].setOption(options[i]);
            }
        }
        function resizeCharts(){
            for( i = 0; i < 4; i++)
            {
                if(charts[i] != null && charts[i] != undefined){
                    charts[i].resize();
                }
            }
        }




        $(".tile").click( function(){
            var current = $( ".main-container" ).children().first();
            var currentIndex = +current.attr('id').slice(-1);
            if(options[currentIndex].legend != null && options[currentIndex].legend != undefined){
                options[currentIndex].legend.show = false;
                charts[currentIndex].setOption(options[currentIndex]);  
            }
            var clicked = $(this).children().first();
            var clickedIndex = +clicked.attr('id').slice(-1);
            if(options[clickedIndex].legend != null && options[clickedIndex].legend != undefined){
                options[clickedIndex].legend.show = true;
                charts[clickedIndex].setOption(options[clickedIndex]);
            }
            $( ".main-container" ).append( clicked );
            $(this).append(current);
            resizeCharts()
        })















    </script>
}


